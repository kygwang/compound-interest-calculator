{"version":3,"sources":["components/MoneyInput.js","components/PercentInput.js","components/YearInput.js","components/BarChart.js","helpers/compound-interest.js","helpers/income-tax.js","components/Results.tsx","App.tsx","index.tsx"],"names":["MoneyInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleInputFocus","toggleState","setState","focused","onBlur","inputValue","state","onUpdate","onFocus","handleFormChange","event","target","value","react_default","a","createElement","className","htmlFor","id","label","type","name","min","numeral","format","onChange","Component","PercentInput","step","YearInput","max","concat","BarChart","calculateDataSet","_ref","data","initialDeposit","backgroundColor","borderColor","borderWidth","regularDeposits","totalInterest","capitalGainsTax","chart","Chart","canvas","labels","datasets","options","scales","xAxes","stacked","yAxes","ticks","callback","tooltips","callbacks","tooltipItem","datasetIndex","yLabel","prevProps","prevState","snapshot","config","update","_this2","ref","getCompoundInterest","principal","deposit","annualRate","compoundsPerYear","Math","pow","getCompoundInterestForPrincipal","compoundRate","getCompoundInterestForDeposits","getIncomeTax","annualIncome","incomeTax","Results","getYearlyInterest","yearlyInterest","currentPrincipal","i","numberOfYears","regularDeposit","grossPrincipal","interestRate","capitalGains","applyTax","calculateCapitalGainsTax","round","yearlyInterests","map","finalYearlyInterest","length","BarChart_BarChart","App","updateInitialDeposit","updateRegularDeposit","updateAnnualIncome","updateInterestRate","updateNumberOfYears","toggleApplyTax","MoneyInput_MoneyInput","YearInput_YearInput","PercentInput_PercentInput","checked","Results_Results","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.683ed5c9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport numeral from 'numeral'\n\nexport default class MoneyInput extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      focused: false,\n      inputValue: props.inputValue\n    }\n  }\n\n  toggleInputFocus = toggleState => {\n    this.setState({\n      focused: toggleState\n    })\n  }\n\n  onBlur = () => {\n    this.toggleInputFocus(false)\n    if (this.props.inputValue !== this.state.inputValue) {\n      this.props.onUpdate(this.state.inputValue)\n    }\n  }\n\n  onFocus = () => {\n    this.toggleInputFocus(true)\n  }\n\n  handleFormChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          id={this.props.id}\n          type={this.state.focused ? 'number' : 'text'}\n          name={this.props.name}\n          min=\"0\"\n          value={!this.state.focused ? numeral(this.state.inputValue).format('$0,0') : this.state.inputValue}\n          onChange={this.handleFormChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport numeral from 'numeral'\n\nexport default class PercentInput extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      focused: false,\n      inputValue: props.inputValue\n    }\n  }\n\n  toggleInputFocus = toggleState => {\n    this.setState({\n      focused: toggleState\n    })\n  }\n\n  onBlur = () => {\n    this.toggleInputFocus(false)\n    if (this.props.inputValue !== this.state.inputValue) {\n      this.props.onUpdate(this.state.inputValue)\n    }\n  }\n\n  onFocus = () => {\n    this.toggleInputFocus(true)\n  }\n\n  handleFormChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          id={this.props.id}\n          step=\"0.01\"\n          type={this.state.focused ? 'number' : 'text'}\n          name={this.props.name}\n          min=\"0\"\n          value={!this.state.focused ? numeral(this.state.inputValue).format('0,0.00%') : this.state.inputValue}\n          onChange={this.handleFormChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class YearInput extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      focused: false,\n      inputValue: props.inputValue\n    }\n  }\n\n  toggleInputFocus = toggleState => {\n    this.setState({\n      focused: toggleState\n    })\n  }\n\n  onBlur = () => {\n    this.toggleInputFocus(false)\n    if (this.props.inputValue !== this.state.inputValue) {\n      this.props.onUpdate(this.state.inputValue)\n    }\n  }\n\n  onFocus = () => {\n    this.toggleInputFocus(true)\n  }\n\n  handleFormChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          id={this.props.id}\n          type={this.state.focused ? 'number' : 'text'}\n          name={this.props.name}\n          min=\"1\"\n          max=\"60\"\n          value={!this.state.focused ? `${this.state.inputValue} year${this.state.inputValue !== '1' ? 's' : ''}` : this.state.inputValue}\n          onChange={this.handleFormChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Chart from 'chart.js'\nimport numeral from 'numeral'\n\nexport default class BarChart extends Component {\n  chart\n\n  componentDidMount() {\n    this.chart = new Chart(this.canvas, {\n      type: 'bar',\n      data: {\n        labels: this.props.labels,\n        datasets: this.calculateDataSet(this.props.data)\n      },\n      options: {\n        scales: {\n          xAxes: [\n            {\n              stacked: true\n            }\n          ],\n          yAxes: [\n            {\n              stacked: true,\n              ticks: {\n                callback: value => numeral(value).format('$0a')\n              }\n            }\n          ]\n        },\n        tooltips: {\n          callbacks: {\n            label: (tooltipItem, data) => {\n              let label = data.datasets[tooltipItem.datasetIndex].label || ''\n\n              if (label) {\n                label += ': '\n              }\n              label += numeral(tooltipItem.yLabel).format('$0a')\n              return label\n            }\n          }\n        }\n      }\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.chart.config.data.labels = this.props.labels\n    this.chart.config.data.datasets = this.calculateDataSet(this.props.data)\n    this.chart.update()\n  }\n\n  render() {\n    return (\n      <canvas ref={canvas => this.canvas = canvas}/>\n    )\n  }\n\n  calculateDataSet = ({initialDeposit, regularDeposits, totalInterest, capitalGainsTax}) => {\n    return [\n      {\n        type: 'bar',\n        data: initialDeposit,\n        label: 'Initial Deposit',\n        backgroundColor: 'rgba(132,5,97,0.2)',\n        borderColor: 'rgba(132,5,97,1)',\n        borderWidth: 1,\n      },\n      {\n        type: 'bar',\n        data: regularDeposits,\n        label: 'Regular Deposits',\n        backgroundColor: 'rgba(201, 79, 167, 0.2)',\n        borderColor: 'rgba(201, 79, 167, 1)',\n        borderWidth: 1,\n      },\n      {\n        type: 'bar',\n        data: totalInterest,\n        label: 'Total Interest',\n        backgroundColor: 'rgba(221, 123, 194, 0.2)',\n        borderColor: 'rgba(221, 123, 194, 1)',\n        borderWidth: 1,\n      },\n      {\n        type: 'bar',\n        data: capitalGainsTax,\n        label: 'Tax',\n        backgroundColor: 'rgba(194,200,212,0.2)',\n        borderColor: 'rgba(194,200,212,1)',\n        borderWidth: 1,\n      }\n    ]\n  }\n}\n","/**\n * @param {number} principal \n * @param {number} annualRate \n * @param {number} compoundsPerYear \n * @returns {number}\n */\nlet getCompoundInterestForPrincipal = (principal, annualRate, compoundsPerYear) => (\n    principal * Math.pow(1 + annualRate / compoundsPerYear, compoundsPerYear)\n);\n\n/**\n * @param {number} deposit \n * @param {number} annualRate \n * @param {number} compoundsPerYear \n * @returns {number}\n */\nlet getCompoundInterestForDeposits = (deposit, annualRate, compoundsPerYear) => {\n    let compoundRate = annualRate / compoundsPerYear;\n\n    return deposit * ((Math.pow(1 + compoundRate, compoundsPerYear) - 1) / compoundRate);\n};\n\n/**\n * @param {number} principal\n * @param {number} deposit\n * @param {number} annualRate\n * @param {number} compoundsPerYear\n * @returns {number}\n */\nlet getCompoundInterest = (principal, deposit, annualRate, compoundsPerYear) => (\n    getCompoundInterestForPrincipal(principal, annualRate, compoundsPerYear) +\n    getCompoundInterestForDeposits(deposit, annualRate, compoundsPerYear)\n);\n\nexport default getCompoundInterest;","/**\n * @param {number} annualIncome\n * @returns {number}\n */\nlet getIncomeTax = annualIncome => {\n    let incomeTax = 0;\n\n    if (annualIncome <= 18200) {\n        incomeTax += 0;\n\n        incomeTax += (annualIncome - 0) * 0;\n    } else if (annualIncome <= 37000) {\n        incomeTax += 0;\n\n        incomeTax += (annualIncome - 18200) * 0.19;\n    } else if (annualIncome <= 87000) {\n        incomeTax += 3572;\n\n        incomeTax += (annualIncome - 37000) * 0.325;\n    } else if (annualIncome <= 180000) {\n        incomeTax += 19822;\n\n        incomeTax += (annualIncome - 87000) * 0.37;\n    } else {\n        incomeTax += 54232;\n\n        incomeTax += (annualIncome - 180000) * 0.45;\n    }\n\n    return incomeTax;\n}\n\nexport default getIncomeTax;\n","import React, { Component } from 'react'\nimport numeral from 'numeral'\nimport BarChart from './BarChart'\nimport getCompoundInterest from '../helpers/compound-interest'\nimport getIncomeTax from '../helpers/income-tax'\n\ninterface Props {\n  initialDeposit: number;\n  regularDeposit: number;\n  numberOfYears: number;\n  interestRate: number;\n  applyTax: boolean;\n  annualIncome: number;\n}\n\ninterface YearlyInterest {\n  name: string;\n  principal: number;\n  regularDeposits: number;\n  capitalGainsTax: number;\n  totalInterest: number;\n}\n\nexport default class Results extends Component<Props> {\n  render() {\n    const yearlyInterests = this.getYearlyInterest();\n\n    let data = {\n      initialDeposit: yearlyInterests.map(yearlyInterest => this.props.initialDeposit),\n      regularDeposits: yearlyInterests.map(yearlyInterest => yearlyInterest.regularDeposits),\n      totalInterest: yearlyInterests.map(yearlyInterest => yearlyInterest.totalInterest),\n      capitalGainsTax: yearlyInterests.map(yearlyInterest => yearlyInterest.capitalGainsTax)\n    };\n\n    const finalYearlyInterest = yearlyInterests[yearlyInterests.length - 1];\n\n    return (\n      <div className=\"content pure-u-1 pure-u-md-4-5\">\n        <h2>Results</h2>\n        <div>\n          <BarChart\n            labels={yearlyInterests.map(yearlyInterest => yearlyInterest.name)}\n            data={data}\n          />\n        </div>\n        <div className=\"quick-results\">\n          <div className=\"quick-result\">\n            <h3>Total Savings</h3>\n            <div className=\"quick-result-figure\">{numeral(+this.props.initialDeposit + finalYearlyInterest.totalInterest + finalYearlyInterest.regularDeposits).format('$0,0')}</div>\n          </div>\n          <div className=\"quick-result\">\n            <h3>Total Interest</h3>\n            <div className=\"quick-result-figure\">{numeral(finalYearlyInterest.totalInterest).format('$0,0')}</div>\n          </div>\n          <div className=\"quick-result\">\n            <h3>Total Deposit</h3>\n            <div className=\"quick-result-figure\">{numeral(+this.props.initialDeposit + finalYearlyInterest.regularDeposits).format('$0,0')}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  private getYearlyInterest = (): Array<YearlyInterest> => {\n    let yearlyInterest: Array<YearlyInterest> = []\n\n    let currentPrincipal = this.props.initialDeposit\n    let totalInterest = 0\n    let regularDeposits = 0\n    for (let i = 1; i <= this.props.numberOfYears; i++) {\n      regularDeposits += this.props.regularDeposit * 12\n\n      let grossPrincipal = getCompoundInterest(currentPrincipal, this.props.regularDeposit, this.props.interestRate, 12)\n\n      // The amount of money made this year in interest\n      let capitalGains = grossPrincipal - currentPrincipal - (this.props.regularDeposit * 12)\n      totalInterest += capitalGains\n\n      // Your money after you've accrued your interest for the year\n      currentPrincipal = grossPrincipal\n\n      // How much tax the government deserves from your earnt interest\n      let capitalGainsTax = 0\n      if (this.props.applyTax) {\n        capitalGainsTax = this.calculateCapitalGainsTax(capitalGains, +this.props.annualIncome)\n      }\n\n      // Your money after the government receives its entitled share of your money\n      currentPrincipal -= capitalGainsTax\n\n      totalInterest -= capitalGainsTax\n\n      yearlyInterest = yearlyInterest.concat({\n        name: `Year ${i}`,\n        principal: Math.round(currentPrincipal),\n        regularDeposits: regularDeposits,\n        capitalGainsTax: Math.round(capitalGainsTax),\n        totalInterest: Math.round(totalInterest)\n      })\n    }\n\n    return yearlyInterest\n  }\n\n  private calculateCapitalGainsTax = (capitalGains: number, annualIncome: number): number => {\n    let grossIncomeTax = getIncomeTax(annualIncome + capitalGains)\n    let incomeTax = getIncomeTax(annualIncome)\n\n    return grossIncomeTax - incomeTax\n  }\n}","import React, { Component } from 'react'\nimport './App.scss'\nimport MoneyInput from './components/MoneyInput'\nimport PercentInput from './components/PercentInput'\nimport YearInput from './components/YearInput'\nimport Results from './components/Results'\n\ninterface Props {\n\n}\n\ninterface State {\n  initialDeposit: number;\n  regularDeposit: number;\n  numberOfYears: number;\n  interestRate: number;\n  applyTax: boolean;\n  annualIncome: number;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      initialDeposit: 100,\n      regularDeposit: 0,\n      numberOfYears: 5,\n      interestRate: 0.03,\n      applyTax: true,\n      annualIncome: 60000\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"pure-g\">\n          <div className=\"sidebar pure-u-1 pure-u-md-1-5\">\n            <h2>Your Strategy</h2>\n            <MoneyInput\n              id=\"initialDeposit\"\n              label=\"Initial Deposit\"\n              name=\"initialDeposit\"\n              inputValue={this.state.initialDeposit}\n              onUpdate={this.updateInitialDeposit}\n            />\n            <MoneyInput\n              id=\"regularDeposit\"\n              label=\"Regular Deposit (Per Month)\"\n              name=\"regularDeposit\"\n              inputValue={this.state.regularDeposit}\n              onUpdate={this.updateRegularDeposit}\n            />\n            <YearInput\n              id=\"numberOfYears\"\n              label=\"Number of Years (Max. 60)\"\n              name=\"numberOfYears\"\n              inputValue={this.state.numberOfYears}\n              onUpdate={this.updateNumberOfYears}\n            />\n            <PercentInput\n              id=\"interestRate\"\n              label=\"Interest Rate\"\n              name=\"interestRate\"\n              inputValue={this.state.interestRate}\n              onUpdate={this.updateInterestRate}\n            />\n\n            <h2>Taxes</h2>\n            <div className=\"form-group\">\n              <label htmlFor=\"applyTax\">Apply Australian Capital Gains Tax</label>\n              <input\n                id=\"applyTax\"\n                type=\"checkbox\"\n                name=\"applyTax\"\n                checked={this.state.applyTax}\n                onChange={this.toggleApplyTax}\n              />\n            </div>\n\n            {this.state.applyTax && (\n              <MoneyInput\n                id=\"annualIncome\"\n                label=\"Annual Income\"\n                name=\"annualIncome\"\n                inputValue={this.state.annualIncome}\n                onUpdate={this.updateAnnualIncome}\n              />\n            )}\n          </div>\n\n          <Results\n            initialDeposit={this.state.initialDeposit}\n            regularDeposit={this.state.regularDeposit}\n            numberOfYears={this.state.numberOfYears}\n            interestRate={this.state.interestRate}\n            applyTax={this.state.applyTax}\n            annualIncome={this.state.annualIncome}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  private updateInitialDeposit = (initialDeposit: number): void => {\n    this.setState({\n      initialDeposit: initialDeposit\n    })\n  }\n\n  private updateRegularDeposit = (regularDeposit: number): void => {\n    this.setState({\n      regularDeposit: regularDeposit\n    })\n  }\n\n  private updateAnnualIncome = (annualIncome: number): void => {\n    this.setState({\n      annualIncome: annualIncome\n    })\n  }\n\n  private updateInterestRate = (interestRate: number): void => {\n    this.setState({\n      interestRate: interestRate\n    })\n  }\n\n  private updateNumberOfYears = (numberOfYears: number): void => {\n    this.setState({\n      numberOfYears: numberOfYears\n    })\n  }\n\n  private toggleApplyTax = (): void => {\n    this.setState({\n      applyTax: !this.state.applyTax\n    })\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}