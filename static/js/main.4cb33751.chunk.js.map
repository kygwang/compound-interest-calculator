{"version":3,"sources":["helpers/compound-interest.js","helpers/income-tax.js","components/BarChart.js","components/MoneyInput.js","components/PercentInput.js","components/YearInput.js","App.js","index.js"],"names":["getCompoundInterest","principal","deposit","annualRate","compoundsPerYear","Math","pow","getCompoundInterestForPrincipal","compoundRate","getCompoundInterestForDeposits","getIncomeTax","annualIncome","incomeTax","BarChart","nextProps","this","chart","config","data","labels","datasets","calculateDataSet","update","Chart","canvas","type","props","options","scales","xAxes","stacked","yAxes","ticks","callback","value","numeral","format","tooltips","callbacks","label","tooltipItem","datasetIndex","yLabel","_ref","initialDeposit","backgroundColor","borderColor","borderWidth","regularDeposits","totalInterest","capitalGainsTax","_this","react_default","a","createElement","ref","Component","MoneyInput","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleInputFocus","toggleState","setState","focused","onBlur","inputValue","state","onUpdate","onFocus","handleFormChange","event","target","className","htmlFor","id","name","min","onChange","PercentInput","step","YearInput","max","concat","App","newValue","defineProperty","updateInitialDeposit","updateRegularDeposit","regularDeposit","updateAnnualIncome","updateInterestRate","interestRate","updateNumberOfYears","numberOfYears","handleToggle","calculateCapitalGainsTax","capitalGains","applyTax","yearlyInterest","currentPrincipal","i","grossPrincipal","round","_this2","getYearlyInterest","map","MoneyInput_MoneyInput","YearInput_YearInput","PercentInput_PercentInput","checked","BarChart_BarChart","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4cb33751.chunk.js","sourcesContent":["/**\n * @param {number} principal \n * @param {number} annualRate \n * @param {number} compoundsPerYear \n * @returns {number}\n */\nlet getCompoundInterestForPrincipal = (principal, annualRate, compoundsPerYear) => (\n    principal * Math.pow(1 + annualRate / compoundsPerYear, compoundsPerYear)\n);\n\n/**\n * @param {number} deposit \n * @param {number} annualRate \n * @param {number} compoundsPerYear \n * @returns {number}\n */\nlet getCompoundInterestForDeposits = (deposit, annualRate, compoundsPerYear) => {\n    let compoundRate = annualRate / compoundsPerYear;\n\n    return deposit * ((Math.pow(1 + compoundRate, compoundsPerYear) - 1) / compoundRate);\n};\n\n/**\n * @param {number} principal\n * @param {number} deposit\n * @param {number} annualRate\n * @param {number} compoundsPerYear\n * @returns {number}\n */\nlet getCompoundInterest = (principal, deposit, annualRate, compoundsPerYear) => (\n    getCompoundInterestForPrincipal(principal, annualRate, compoundsPerYear) +\n    getCompoundInterestForDeposits(deposit, annualRate, compoundsPerYear)\n);\n\nexport default getCompoundInterest;","/**\n * @param {number} annualIncome\n * @returns {number}\n */\nlet getIncomeTax = annualIncome => {\n    let incomeTax = 0;\n\n    if (annualIncome <= 18200) {\n        incomeTax += 0;\n\n        incomeTax += (annualIncome - 0) * 0;\n    } else if (annualIncome <= 37000) {\n        incomeTax += 0;\n\n        incomeTax += (annualIncome - 18200) * 0.19;\n    } else if (annualIncome <= 87000) {\n        incomeTax += 3572;\n\n        incomeTax += (annualIncome - 37000) * 0.325;\n    } else if (annualIncome <= 180000) {\n        incomeTax += 19822;\n\n        incomeTax += (annualIncome - 87000) * 0.37;\n    } else {\n        incomeTax += 54232;\n\n        incomeTax += (annualIncome - 180000) * 0.45;\n    }\n\n    return incomeTax;\n}\n\nexport default getIncomeTax;\n","import React, { Component } from 'react'\nimport Chart from 'chart.js'\nimport numeral from 'numeral'\n\nexport default class BarChart extends Component {\n  chart\n\n  componentWillUpdate (nextProps) {\n    this.chart.config.data.labels = nextProps.labels\n    this.chart.config.data.datasets = this.calculateDataSet(nextProps.data)\n    this.chart.update()\n  }\n\n  componentDidMount () {\n    this.chart = new Chart(this.canvas, {\n      type: 'bar',\n      data: {\n        labels: this.props.labels,\n        datasets: this.calculateDataSet(this.props.data)\n      },\n      options: {\n        scales: {\n          xAxes: [\n            {\n              stacked: true\n            }\n          ],\n          yAxes: [\n            {\n              stacked: true,\n              ticks: {\n                callback: value => numeral(value).format('$0a')\n              }\n            }\n          ]\n        },\n        tooltips: {\n          callbacks: {\n            label: (tooltipItem, data) => {\n              let label = data.datasets[tooltipItem.datasetIndex].label || ''\n\n              if (label) {\n                label += ': '\n              }\n              label += numeral(tooltipItem.yLabel).format('$0a')\n              return label\n            }\n          }\n        }\n      }\n    })\n  }\n\n  calculateDataSet ({initialDeposit, regularDeposits, totalInterest, capitalGainsTax}) {\n    return [\n      {\n        type: 'bar',\n        data: initialDeposit,\n        label: 'Initial Deposit',\n        backgroundColor: 'rgba(132,5,97,0.2)',\n        borderColor: 'rgba(132,5,97,1)',\n        borderWidth: 1,\n      },\n      {\n        type: 'bar',\n        data: regularDeposits,\n        label: 'Regular Deposits',\n        backgroundColor: 'rgba(201, 79, 167, 0.2)',\n        borderColor: 'rgba(201, 79, 167, 1)',\n        borderWidth: 1,\n      },\n      {\n        type: 'bar',\n        data: totalInterest,\n        label: 'Total Interest',\n        backgroundColor: 'rgba(221, 123, 194, 0.2)',\n        borderColor: 'rgba(221, 123, 194, 1)',\n        borderWidth: 1,\n      },\n      {\n        type: 'bar',\n        data: capitalGainsTax,\n        label: 'Tax',\n        backgroundColor: 'rgba(194,200,212,0.2)',\n        borderColor: 'rgba(194,200,212,1)',\n        borderWidth: 1,\n      }\n    ]\n  }\n\n  render () {\n    return (\n      <canvas ref={canvas => this.canvas = canvas}/>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport numeral from 'numeral'\n\nexport default class MoneyInput extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      focused: false,\n      inputValue: props.inputValue\n    }\n  }\n\n  toggleInputFocus = toggleState => {\n    this.setState({\n      focused: toggleState\n    })\n  }\n\n  onBlur = () => {\n    this.toggleInputFocus(false)\n    if (this.props.inputValue !== this.state.inputValue) {\n      this.props.onUpdate(this.state.inputValue)\n    }\n  }\n\n  onFocus = () => {\n    this.toggleInputFocus(true)\n  }\n\n  handleFormChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          id={this.props.id}\n          type={this.state.focused ? 'number' : 'text'}\n          name={this.props.name}\n          min=\"0\"\n          value={!this.state.focused ? numeral(this.state.inputValue).format('$0,0') : this.state.inputValue}\n          onChange={this.handleFormChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport numeral from 'numeral'\n\nexport default class PercentInput extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      focused: false,\n      inputValue: props.inputValue\n    }\n  }\n\n  toggleInputFocus = toggleState => {\n    this.setState({\n      focused: toggleState\n    })\n  }\n\n  onBlur = () => {\n    this.toggleInputFocus(false)\n    if (this.props.inputValue !== this.state.inputValue) {\n      this.props.onUpdate(this.state.inputValue)\n    }\n  }\n\n  onFocus = () => {\n    this.toggleInputFocus(true)\n  }\n\n  handleFormChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          id={this.props.id}\n          step=\"0.01\"\n          type={this.state.focused ? 'number' : 'text'}\n          name={this.props.name}\n          min=\"0\"\n          value={!this.state.focused ? numeral(this.state.inputValue).format('0,0.00%') : this.state.inputValue}\n          onChange={this.handleFormChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class YearInput extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      focused: false,\n      inputValue: props.inputValue\n    }\n  }\n\n  toggleInputFocus = toggleState => {\n    this.setState({\n      focused: toggleState\n    })\n  }\n\n  onBlur = () => {\n    this.toggleInputFocus(false)\n    if (this.props.inputValue !== this.state.inputValue) {\n      this.props.onUpdate(this.state.inputValue)\n    }\n  }\n\n  onFocus = () => {\n    this.toggleInputFocus(true)\n  }\n\n  handleFormChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          id={this.props.id}\n          type={this.state.focused ? 'number' : 'text'}\n          name={this.props.name}\n          min=\"1\"\n          max=\"60\"\n          value={!this.state.focused ? `${this.state.inputValue} year${this.state.inputValue !== '1' ? 's' : ''}` : this.state.inputValue}\n          onChange={this.handleFormChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss'\nimport getCompoundInterest from './helpers/compound-interest'\nimport getIncomeTax from './helpers/income-tax'\nimport BarChart from './components/BarChart'\nimport MoneyInput from './components/MoneyInput'\nimport PercentInput from './components/PercentInput'\nimport YearInput from './components/YearInput'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      initialDeposit: 100,\n      regularDeposit: 0,\n      numberOfYears: 5,\n      interestRate: 0.03,\n      applyTax: true,\n      annualIncome: 60000\n    }\n  }\n\n  handleFormChange = event => {\n    let newValue = event.target.value\n    switch (event.target.name) {\n      case 'numberOfYears':\n        if (newValue < 0) {\n          newValue = 0\n        } else if (newValue > 60) {\n          newValue = 60\n        }\n        break\n      default:\n        newValue = event.target.value\n    }\n\n    this.setState({\n      [event.target.name]: newValue\n    })\n  }\n\n  updateInitialDeposit = initialDeposit => {\n    this.setState({\n      initialDeposit: initialDeposit\n    })\n  }\n\n  updateRegularDeposit = regularDeposit => {\n    this.setState({\n      regularDeposit: regularDeposit\n    })\n  }\n\n  updateAnnualIncome = annualIncome => {\n    this.setState({\n      annualIncome: annualIncome\n    })\n  }\n\n  updateInterestRate = interestRate => {\n    this.setState({\n      interestRate: interestRate\n    })\n  }\n\n  updateNumberOfYears = numberOfYears => {\n    this.setState({\n      numberOfYears: numberOfYears\n    })\n  }\n\n  handleToggle = event => {\n    this.setState({\n      [event.target.name]: !this.state[event.target.name]\n    })\n  }\n\n  getYearlyInterest () {\n    let yearlyInterest = []\n\n    let currentPrincipal = this.state.initialDeposit\n    let totalInterest = 0\n    let regularDeposits = 0\n    for (let i = 1; i <= this.state.numberOfYears; i++) {\n      regularDeposits += this.state.regularDeposit * 12\n\n      let grossPrincipal = getCompoundInterest(currentPrincipal, this.state.regularDeposit, this.state.interestRate, 12)\n\n      // The amount of money made this year in interest\n      let capitalGains = grossPrincipal - currentPrincipal - (this.state.regularDeposit * 12)\n      totalInterest += capitalGains\n\n      // Your money after you've accrued your interest for the year\n      currentPrincipal = grossPrincipal\n\n      // How much tax the government deserves from your earnt interest\n      let capitalGainsTax = 0\n      if (this.state.applyTax) {\n        capitalGainsTax = this.calculateCapitalGainsTax(capitalGains, +this.state.annualIncome)\n      }\n\n      // Your money after the government receives its entitled share of your money\n      currentPrincipal -= capitalGainsTax\n\n      totalInterest -= capitalGainsTax\n\n      yearlyInterest = yearlyInterest.concat({\n        name: `Year ${i}`,\n        principal: Math.round(currentPrincipal),\n        regularDeposits: regularDeposits,\n        capitalGainsTax: Math.round(capitalGainsTax),\n        totalInterest: Math.round(totalInterest)\n      })\n    }\n\n    return yearlyInterest\n  }\n\n  calculateCapitalGainsTax = (capitalGains, annualIncome) => {\n    let grossIncomeTax = getIncomeTax(annualIncome + capitalGains)\n    let incomeTax = getIncomeTax(annualIncome)\n\n    return grossIncomeTax - incomeTax\n  }\n\n  render () {\n    let data = {\n      initialDeposit: this.getYearlyInterest().map(yearlyInterest => this.state.initialDeposit),\n      regularDeposits: this.getYearlyInterest().map(yearlyInterest => yearlyInterest.regularDeposits),\n      totalInterest: this.getYearlyInterest().map(yearlyInterest => yearlyInterest.totalInterest),\n      capitalGainsTax: this.getYearlyInterest().map(yearlyInterest => yearlyInterest.capitalGainsTax)\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"pure-g\">\n          <div className=\"sidebar pure-u-1 pure-u-md-1-5\">\n            <h2>Your Strategy</h2>\n            <MoneyInput\n              id=\"initialDeposit\"\n              label=\"Initial Deposit\"\n              name=\"initialDeposit\"\n              inputValue={this.state.initialDeposit}\n              onUpdate={this.updateInitialDeposit}\n            />\n            <MoneyInput\n              id=\"regularDeposit\"\n              label=\"Regular Deposit (Per Month)\"\n              name=\"regularDeposit\"\n              inputValue={this.state.regularDeposit}\n              onUpdate={this.updateRegularDeposit}\n            />\n            <YearInput\n              id=\"numberOfYears\"\n              label=\"Number of Years (Max. 60)\"\n              name=\"numberOfYears\"\n              inputValue={this.state.numberOfYears}\n              onUpdate={this.updateNumberOfYears}\n            />\n            <PercentInput\n              id=\"interestRate\"\n              label=\"Interest Rate\"\n              name=\"interestRate\"\n              inputValue={this.state.interestRate}\n              onUpdate={this.updateInterestRate}\n            />\n\n            <h2>Taxes</h2>\n            <div className=\"form-group\">\n              <label>Apply Tax</label>\n              <input type=\"checkbox\" name=\"applyTax\" checked={this.state.applyTax}\n                     onChange={this.handleToggle}/>\n            </div>\n            <MoneyInput\n              id=\"annualIncome\"\n              label=\"Annual Income\"\n              name=\"annualIncome\"\n              inputValue={this.state.annualIncome}\n              onUpdate={this.updateAnnualIncome}\n            />\n          </div>\n          <div className=\"content pure-u-1 pure-u-md-4-5\">\n            <h2>Results</h2>\n            <BarChart\n              labels={this.getYearlyInterest().map(yearlyInterest => yearlyInterest.name)}\n              data={data}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}